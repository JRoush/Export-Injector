/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : F:\\Game Sources\\Elder Scrolls IV Oblivion\\My Mods\\COEF\\ExportInjector\\EEDGrammar.g
 *     -                            On : 2010-11-13 20:24:13
 *     -                for the parser : EEDGrammarParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser EEDGrammarParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pEEDGrammarParser, which is returned from a call to EEDGrammarParserNew().
 *
 * The methods in pEEDGrammarParser are  as follows:
 *
 *  - void      pEEDGrammarParser->file(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->statement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->nameStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->baseStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->versionStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->versionDesc(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->exportStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->exportSymbol(pEEDGrammarParser)
 *  - unsigned long      pEEDGrammarParser->symbolSource(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->heapsizeStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->stacksizeStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->stubStatement(pEEDGrammarParser)
 *  - void      pEEDGrammarParser->sectionsStatement(pEEDGrammarParser)
 *  - long      pEEDGrammarParser->number(pEEDGrammarParser)
 *  - EEDGrammarParser_filename_return      pEEDGrammarParser->filename(pEEDGrammarParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_EEDGrammarParser_H
#define _EEDGrammarParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	
	#include <stdlib.h>					// string -> number parsing
	#include <iostream>					// debug output
	#include <windows.h>				// module name/handle funcs - TODO: replace
	#include <vector>					// for list of active modules
	#include "ExportManager.h"			// class def
	
	extern std::vector<unsigned long>	g_LoadingBases;		// base offset array for active modules
	extern std::vector<ExportManager*> 	g_ExportManagers;	// manager object array for active modules


 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct EEDGrammarParser_Ctx_struct EEDGrammarParser, * pEEDGrammarParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct EEDGrammarParser_filename_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    EEDGrammarParser_filename_return;



/** Context tracking structure for EEDGrammarParser
 */
struct EEDGrammarParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     void (*file)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*statement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*nameStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*baseStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*versionStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*versionDesc)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*exportStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*exportSymbol)	(struct EEDGrammarParser_Ctx_struct * ctx);
     unsigned long (*symbolSource)	(struct EEDGrammarParser_Ctx_struct * ctx, unsigned long idxModule);
     void (*heapsizeStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*stacksizeStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*stubStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     void (*sectionsStatement)	(struct EEDGrammarParser_Ctx_struct * ctx);
     long (*number)	(struct EEDGrammarParser_Ctx_struct * ctx);
     EEDGrammarParser_filename_return (*filename)	(struct EEDGrammarParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct EEDGrammarParser_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pEEDGrammarParser EEDGrammarParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pEEDGrammarParser EEDGrammarParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define EXECUTE_ONLY      11
#define T__62      62
#define T__63      63
#define FUNCTIONS      16
#define LONGNAMES      23
#define WSTOKEN      54
#define FIXED      15
#define REALMODE      42
#define NONDISCARDABLE      31
#define T__61      61
#define T__60      60
#define EOF      -1
#define DEV386      8
#define EXETYPE      14
#define MULTIPLE      26
#define CODE      5
#define T__56      56
#define T__57      57
#define PURE      39
#define T__58      58
#define PRELOAD      37
#define DESCRIPTION      7
#define NODATA      28
#define NONSHARED      33
#define HEX      51
#define OBJECTS      35
#define T__59      59
#define DISCARDABLE      9
#define INCLUDE      19
#define MOVEABLE      25
#define IMPURE      18
#define COMMENT      53
#define EXECUTEREAD      13
#define WINDOWAPI      46
#define CONFORMING      6
#define EXECUTEONLY      12
#define T__80      80
#define SYMBOL      50
#define MOVABLE      24
#define READWRITE      41
#define OLD      36
#define WHITESPACE      55
#define INT      49
#define READONLY      40
#define NOTWINDOWCOMPAT      34
#define PROTMODE      38
#define RESIDENT      43
#define LOADONCALL      22
#define T__71      71
#define APPLOADER      4
#define T__72      72
#define SINGLE      45
#define NONCONFORMING      30
#define T__70      70
#define RESIDENTNAME      44
#define INITINSTANCE      20
#define NEWFILES      27
#define NONE      32
#define WINDOWS      48
#define NOIOPL      29
#define IMPORTS      17
#define WINDOWCOMPAT      47
#define T__76      76
#define IOPL      21
#define T__75      75
#define T__74      74
#define T__73      73
#define T__79      79
#define DYNAMIC      10
#define STRING      52
#define T__78      78
#define T__77      77
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for EEDGrammarParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
