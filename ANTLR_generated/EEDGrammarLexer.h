/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : F:\\Game Sources\\Elder Scrolls IV Oblivion\\My Mods\\COEF\\ExportInjector\\EEDGrammar.g
 *     -                            On : 2010-11-13 20:24:14
 *     -                 for the lexer : EEDGrammarLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer EEDGrammarLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pEEDGrammarLexer, which is returned from a call to EEDGrammarLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pEEDGrammarLexer are  as follows:
 *
 *  -  void      pEEDGrammarLexer->APPLOADER(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->CODE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->CONFORMING(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->DESCRIPTION(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->DEV386(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->DISCARDABLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->DYNAMIC(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->EXECUTE_ONLY(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->EXECUTEONLY(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->EXECUTEREAD(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->EXETYPE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->FIXED(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->FUNCTIONS(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->IMPORTS(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->IMPURE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->INCLUDE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->INITINSTANCE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->IOPL(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->LOADONCALL(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->LONGNAMES(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->MOVABLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->MOVEABLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->MULTIPLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NEWFILES(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NODATA(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NOIOPL(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NONCONFORMING(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NONDISCARDABLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NONE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NONSHARED(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->NOTWINDOWCOMPAT(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->OBJECTS(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->OLD(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->PRELOAD(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->PROTMODE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->PURE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->READONLY(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->READWRITE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->REALMODE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->RESIDENT(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->RESIDENTNAME(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->SINGLE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->WINDOWAPI(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->WINDOWCOMPAT(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->WINDOWS(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__56(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__57(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__58(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__59(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__60(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__61(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__62(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__63(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__64(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__65(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__66(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__67(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__68(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__69(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__70(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__71(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__72(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__73(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__74(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__75(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__76(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__77(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__78(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__79(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->T__80(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->COMMENT(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->STRING(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->HEX(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->INT(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->SYMBOL(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->WSTOKEN(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->WHITESPACE(pEEDGrammarLexer)
 *  -  void      pEEDGrammarLexer->Tokens(pEEDGrammarLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_EEDGrammarLexer_H
#define _EEDGrammarLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include <iostream>					// debug output

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct EEDGrammarLexer_Ctx_struct EEDGrammarLexer, * pEEDGrammarLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for EEDGrammarLexer
 */
struct EEDGrammarLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mAPPLOADER)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mCODE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mCONFORMING)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mDESCRIPTION)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mDEV386)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mDISCARDABLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mDYNAMIC)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mEXECUTE_ONLY)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mEXECUTEONLY)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mEXECUTEREAD)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mEXETYPE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mFIXED)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mFUNCTIONS)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mIMPORTS)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mIMPURE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mINCLUDE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mINITINSTANCE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mIOPL)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mLOADONCALL)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mLONGNAMES)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mMOVABLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mMOVEABLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mMULTIPLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNEWFILES)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNODATA)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNOIOPL)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNONCONFORMING)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNONDISCARDABLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNONE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNONSHARED)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mNOTWINDOWCOMPAT)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mOBJECTS)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mOLD)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mPRELOAD)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mPROTMODE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mPURE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mREADONLY)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mREADWRITE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mREALMODE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mRESIDENT)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mRESIDENTNAME)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mSINGLE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mWINDOWAPI)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mWINDOWCOMPAT)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mWINDOWS)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__56)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__57)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__58)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__59)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__60)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__61)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__62)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__63)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__64)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__65)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__66)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__67)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__68)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__69)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__70)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__71)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__72)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__73)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__74)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__75)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__76)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__77)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__78)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__79)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mT__80)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mHEX)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mINT)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mSYMBOL)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mWSTOKEN)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mWHITESPACE)	(struct EEDGrammarLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct EEDGrammarLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct EEDGrammarLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pEEDGrammarLexer EEDGrammarLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pEEDGrammarLexer EEDGrammarLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define EXECUTE_ONLY      11
#define T__65      65
#define T__62      62
#define FUNCTIONS      16
#define T__63      63
#define LONGNAMES      23
#define FIXED      15
#define WSTOKEN      54
#define NONDISCARDABLE      31
#define REALMODE      42
#define T__61      61
#define EOF      -1
#define T__60      60
#define DEV386      8
#define EXETYPE      14
#define MULTIPLE      26
#define CODE      5
#define T__56      56
#define T__57      57
#define PURE      39
#define T__58      58
#define PRELOAD      37
#define DESCRIPTION      7
#define NODATA      28
#define NONSHARED      33
#define HEX      51
#define OBJECTS      35
#define T__59      59
#define DISCARDABLE      9
#define INCLUDE      19
#define MOVEABLE      25
#define IMPURE      18
#define COMMENT      53
#define EXECUTEREAD      13
#define WINDOWAPI      46
#define CONFORMING      6
#define EXECUTEONLY      12
#define T__80      80
#define MOVABLE      24
#define SYMBOL      50
#define READWRITE      41
#define OLD      36
#define WHITESPACE      55
#define INT      49
#define READONLY      40
#define NOTWINDOWCOMPAT      34
#define PROTMODE      38
#define RESIDENT      43
#define APPLOADER      4
#define T__71      71
#define LOADONCALL      22
#define T__72      72
#define NONCONFORMING      30
#define SINGLE      45
#define T__70      70
#define RESIDENTNAME      44
#define INITINSTANCE      20
#define NEWFILES      27
#define NONE      32
#define WINDOWS      48
#define IMPORTS      17
#define NOIOPL      29
#define WINDOWCOMPAT      47
#define T__76      76
#define T__75      75
#define IOPL      21
#define T__74      74
#define T__73      73
#define DYNAMIC      10
#define T__79      79
#define T__78      78
#define STRING      52
#define T__77      77
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for EEDGrammarLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
